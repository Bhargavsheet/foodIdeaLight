{"ast":null,"code":"var _jsxFileName = \"/var/www/html/react2/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { DragDropContext } from \"react-beautiful-dnd\";\nimport helper from \"./helper_functions\";\nimport ImageGallery from \"./ImageGallery\";\nimport \"./styles.css\";\nimport Column from \"./Components/Column\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  let initialState = [{\n    groupName: \"Today\",\n    tasks: [{\n      id: \"1\",\n      title: \"Test-1\"\n    }, {\n      id: \"2\",\n      title: \"Test-2\"\n    }]\n  }, {\n    groupName: \"Tomorrow\",\n    tasks: [{\n      id: \"3\",\n      title: \"Test-3\"\n    }, {\n      id: \"4\",\n      title: \"Test-4\"\n    }]\n  }];\n  const [taskList, setTasks] = useState(initialState);\n  function onDragEnd(val) {\n    // Your version\n    // let result = helper.reorder(val.source, val.destination, taskList);\n    // setTasks(result);\n\n    /// A different way!\n    const {\n      draggableId,\n      source,\n      destination\n    } = val;\n    const [sourceGroup] = taskList.filter(column => column.groupName === source.droppableId);\n\n    // Destination might be `null`: when a task is\n    // dropped outside any drop area. In this case the\n    // task reamins in the same column so `destination` is same as `source`\n    const [destinationGroup] = destination ? taskList.filter(column => column.groupName === destination.droppableId) : {\n      ...sourceGroup\n    };\n\n    // We save the task we are moving\n    const [movingTask] = sourceGroup.tasks.filter(t => t.id === draggableId);\n    const newSourceGroupTasks = sourceGroup.tasks.splice(source.index, 1);\n    const newDestinationGroupTasks = destinationGroup.tasks.splice(destination.index, 0, movingTask);\n\n    // Mapping over the task lists means that you can easily\n    // add new columns\n    const newTaskList = taskList.map(column => {\n      if (column.groupName === source.groupName) {\n        return {\n          groupName: column.groupName,\n          tasks: newSourceGroupTasks\n        };\n      }\n      if (column.groupName === destination.groupName) {\n        return {\n          groupName: column.groupName,\n          tasks: newDestinationGroupTasks\n        };\n      }\n      return column;\n    });\n    setTasks(newTaskList);\n  }\n  return /*#__PURE__*/_jsxDEV(ImageGallery, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"lOPypuOYCJo0iKzoTHxCZPrasRw=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","DragDropContext","helper","ImageGallery","Column","jsxDEV","_jsxDEV","App","_s","initialState","groupName","tasks","id","title","taskList","setTasks","onDragEnd","val","draggableId","source","destination","sourceGroup","filter","column","droppableId","destinationGroup","movingTask","t","newSourceGroupTasks","splice","index","newDestinationGroupTasks","newTaskList","map","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/var/www/html/react2/src/App.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport { DragDropContext } from \"react-beautiful-dnd\";\nimport helper from \"./helper_functions\";\nimport ImageGallery from \"./ImageGallery\";\nimport \"./styles.css\";\n\nimport Column from \"./Components/Column\";\n\nfunction App() {\n  let initialState = [\n    {\n      groupName: \"Today\",\n      tasks: [{ id: \"1\", title: \"Test-1\" }, { id: \"2\", title: \"Test-2\" }]\n    },\n    {\n      groupName: \"Tomorrow\",\n      tasks: [{ id: \"3\", title: \"Test-3\" }, { id: \"4\", title: \"Test-4\" }]\n    }\n  ];\n\n  const [taskList, setTasks] = useState(initialState);\n\n  function onDragEnd(val) {\n    // Your version\n    // let result = helper.reorder(val.source, val.destination, taskList);\n    // setTasks(result);\n\n    /// A different way!\n    const { draggableId, source, destination } = val;\n\n    const [sourceGroup] = taskList.filter(\n      column => column.groupName === source.droppableId\n    );\n\n    // Destination might be `null`: when a task is\n    // dropped outside any drop area. In this case the\n    // task reamins in the same column so `destination` is same as `source`\n    const [destinationGroup] = destination\n      ? taskList.filter(column => column.groupName === destination.droppableId)\n      : { ...sourceGroup };\n\n    // We save the task we are moving\n    const [movingTask] = sourceGroup.tasks.filter(t => t.id === draggableId);\n\n    const newSourceGroupTasks = sourceGroup.tasks.splice(source.index, 1);\n    const newDestinationGroupTasks = destinationGroup.tasks.splice(\n      destination.index,\n      0,\n      movingTask\n    );\n\n    // Mapping over the task lists means that you can easily\n    // add new columns\n    const newTaskList = taskList.map(column => {\n      if (column.groupName === source.groupName) {\n        return {\n          groupName: column.groupName,\n          tasks: newSourceGroupTasks\n        };\n      }\n      if (column.groupName === destination.groupName) {\n        return {\n          groupName: column.groupName,\n          tasks: newDestinationGroupTasks\n        };\n      }\n      return column;\n    });\n    setTasks(newTaskList);\n  }\n\n  return (\n    <ImageGallery />\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SAASC,eAAe,QAAQ,qBAAqB;AACrD,OAAOC,MAAM,MAAM,oBAAoB;AACvC,OAAOC,YAAY,MAAM,gBAAgB;AACzC,OAAO,cAAc;AAErB,OAAOC,MAAM,MAAM,qBAAqB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEzC,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,IAAIC,YAAY,GAAG,CACjB;IACEC,SAAS,EAAE,OAAO;IAClBC,KAAK,EAAE,CAAC;MAAEC,EAAE,EAAE,GAAG;MAAEC,KAAK,EAAE;IAAS,CAAC,EAAE;MAAED,EAAE,EAAE,GAAG;MAAEC,KAAK,EAAE;IAAS,CAAC;EACpE,CAAC,EACD;IACEH,SAAS,EAAE,UAAU;IACrBC,KAAK,EAAE,CAAC;MAAEC,EAAE,EAAE,GAAG;MAAEC,KAAK,EAAE;IAAS,CAAC,EAAE;MAAED,EAAE,EAAE,GAAG;MAAEC,KAAK,EAAE;IAAS,CAAC;EACpE,CAAC,CACF;EAED,MAAM,CAACC,QAAQ,EAAEC,QAAQ,CAAC,GAAGf,QAAQ,CAACS,YAAY,CAAC;EAEnD,SAASO,SAASA,CAACC,GAAG,EAAE;IACtB;IACA;IACA;;IAEA;IACA,MAAM;MAAEC,WAAW;MAAEC,MAAM;MAAEC;IAAY,CAAC,GAAGH,GAAG;IAEhD,MAAM,CAACI,WAAW,CAAC,GAAGP,QAAQ,CAACQ,MAAM,CACnCC,MAAM,IAAIA,MAAM,CAACb,SAAS,KAAKS,MAAM,CAACK,WACxC,CAAC;;IAED;IACA;IACA;IACA,MAAM,CAACC,gBAAgB,CAAC,GAAGL,WAAW,GAClCN,QAAQ,CAACQ,MAAM,CAACC,MAAM,IAAIA,MAAM,CAACb,SAAS,KAAKU,WAAW,CAACI,WAAW,CAAC,GACvE;MAAE,GAAGH;IAAY,CAAC;;IAEtB;IACA,MAAM,CAACK,UAAU,CAAC,GAAGL,WAAW,CAACV,KAAK,CAACW,MAAM,CAACK,CAAC,IAAIA,CAAC,CAACf,EAAE,KAAKM,WAAW,CAAC;IAExE,MAAMU,mBAAmB,GAAGP,WAAW,CAACV,KAAK,CAACkB,MAAM,CAACV,MAAM,CAACW,KAAK,EAAE,CAAC,CAAC;IACrE,MAAMC,wBAAwB,GAAGN,gBAAgB,CAACd,KAAK,CAACkB,MAAM,CAC5DT,WAAW,CAACU,KAAK,EACjB,CAAC,EACDJ,UACF,CAAC;;IAED;IACA;IACA,MAAMM,WAAW,GAAGlB,QAAQ,CAACmB,GAAG,CAACV,MAAM,IAAI;MACzC,IAAIA,MAAM,CAACb,SAAS,KAAKS,MAAM,CAACT,SAAS,EAAE;QACzC,OAAO;UACLA,SAAS,EAAEa,MAAM,CAACb,SAAS;UAC3BC,KAAK,EAAEiB;QACT,CAAC;MACH;MACA,IAAIL,MAAM,CAACb,SAAS,KAAKU,WAAW,CAACV,SAAS,EAAE;QAC9C,OAAO;UACLA,SAAS,EAAEa,MAAM,CAACb,SAAS;UAC3BC,KAAK,EAAEoB;QACT,CAAC;MACH;MACA,OAAOR,MAAM;IACf,CAAC,CAAC;IACFR,QAAQ,CAACiB,WAAW,CAAC;EACvB;EAEA,oBACE1B,OAAA,CAACH,YAAY;IAAA+B,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;AAEpB;AAAC7B,EAAA,CAlEQD,GAAG;AAAA+B,EAAA,GAAH/B,GAAG;AAoEZ,eAAeA,GAAG;AAAC,IAAA+B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}